type Err = record {
  code : nat16;
  message : text;
};

type HistoryAction = variant {
  create;
  update;
  delete;
  restore;
};

type UserConfig = variant {
  admin : record {
    bio : text;
  };
  reviewer : record {
    bio : text;
    neuron_id : nat64;
    wallet_address : text;
  };
  anonymous;
};

type GetMyUserProfileResponse = variant {
  ok : record {
    id : text;
    username : text;
    config : UserConfig;
  };
  err : Err;
};

type UserProfileHistoryEntry = record {
  username : text;
  config : UserConfig;
};

type GetMyUserProfileHistoryResponse = variant {
  ok : record {
    history : vec record {
      action : HistoryAction;
      date_time : text;
      user : principal;
      data : UserProfileHistoryEntry;
    };
  };
  err : Err;
};

type CreateMyUserProfileResponse = variant {
  ok : record {
    id : text;
    username : text;
    config : UserConfig;
  };
  err : Err;
};

type UserConfigUpdate = variant {
  admin : record {
    bio : opt text;
  };
  reviewer : record {
    bio : opt text;
    neuron_id : opt nat64;
    wallet_address : opt text;
  };
  anonymous;
};

type UpdateUserProfileRequest = record {
  user_id : text;
  username : opt text;
  config : opt UserConfigUpdate;
};

type UpdateUserProfileResponse = variant {
  ok;
  err : Err;
};

type NnsProposalTopic = variant {
  ReplicaVersionManagement;
  SystemCanisterManagement;
};

type NervousSystem = variant {
  Network : record {
    id : nat64;
    topic : NnsProposalTopic;
  };
};

type ReviewPeriodState = variant {
  InProgress;
  Completed;
};

type Proposal = record {
  title : text;
  nervous_system : NervousSystem;
  state : ReviewPeriodState;
  proposed_at : text;
  proposed_by : nat64;
};

type GetProposalResponse = variant {
  ok : record {
    id : text;
    proposal : Proposal;
  };
  err : Err;
};

type LogsFilterRequest = record {
  before_timestamp_ms : opt nat64;
  after_timestamp_ms : opt nat64;
  context_contains_any : opt vec text;
  message_contains_any : opt vec text;
};

type LogEntry = record {
  date_time : text;
  context : opt text;
  message : text;
};

type GetLogsResponse = variant {
  ok : vec LogEntry;
  err : Err;
};

service : {
  get_my_user_profile : () -> (GetMyUserProfileResponse) query;
  get_my_user_profile_history : () -> (GetMyUserProfileHistoryResponse) query;
  create_my_user_profile : () -> (CreateMyUserProfileResponse);
  update_user_profile : (UpdateUserProfileRequest) -> (UpdateUserProfileResponse);
  get_logs : (LogsFilterRequest) -> (GetLogsResponse) query;
};
